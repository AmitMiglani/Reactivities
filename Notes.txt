dotnetCore 2.2 installer : https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-2.2.402-windows-x64-installer

Installing Node via NVM
	https://medium.com/@Joachim8675309/installing-node-js-with-nvm-4dc469c977d9

Why Node?
	https://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js

Visual Studio Extensions 
	AutoClose Tag
	Auto Rename Tag
	Bracket Pair Colorizer 2
	C#
	C# Extensions
	ES7 React/Redux/GraphQL
	Material Icon Theme
	Nuget Package Manager
	Prettier - Code Formatter
	SQLite

	
GitHub Code Location: github.com/TryCatchLearn/Reactivities

======================

Walking Skeleton
	Intro to Clean Architecture
	Using the dotnet CLI
	Reviewing the project templates
	Running the app
	EF Migrations: Scaffolding of the database using our code
	Seeding data
	Postman
	Using git for source control
	
Skeletion Solution
	Four projects
		API : receiving HTTP requests and respond to them
		Application : Process the business logic
		Domain: I contain the business entities and do not depend on anything
		Persistence


Commands
	dotnet --info
	
	
Section 1
-----------
Reactivities folder
	Reactivities.sln
	Domain/
	Application/
	Persistence/
	API/

The csproj has a <PropertyGroup> with element <TargetFramework> , these are targetting netstandard2.0 

1. dotnet new sln   >> Create a sln file with name of the folder
2. dotnet new classlib -n Domain >> generates .csproj , obj, class1.cs files
3. dotnet new classlib -n Application
4. dotnet new classlib -n Persistence
5. dotnet new webapi -n API


Add Projects to Solution and add references to projects
--------------------------------------------------------
This will be run from within the sln folder
1. dotnet sln add Domain/
2. dotnet sln add Persistence/
3. dotnet sln add API/
4. dotnet sln add Application/
5. dotnet sln list

Add references to the projects
------------------------------
From with Application folder
1. dotnet add reference ..\Domain\
2. dotnet add reference ..\Persistence\

From with API project
1. dotnet add reference ..\Application

From with Persistence Project
1. dotnet add reference ../Domain/

Type 
1. code . from with Reactivities folder


==================================================
Startup.cs

HSTS : Header Secure Transport Service

Disable the https/hsts settings in the Startup.cs and LaunchSettings.json
Startup.cs
	comment out app.useHsts()
	comment out app.UseMvc()
In LaunchSettings.json
	comment out applicationUrl: https://localhost:5001

In Launch Settings.json ,w e also specify the environment variable like ASPNETCORE_ENVIRONMENT: Development/Production

Run a project:
--------------
dotnet run -p .\API\

Creating Domain Entity
----------------------

Code first database creation
Create a DataContext Class , make it extend from DbContext class which is part of EFramework class

Ctrl + Shift + P == Open the Command Pallete:

In Startup.cs , add dependency Injection:

services.AddDbContext<DataContext>(opt => 
            {
                opt.UseSqlite(Configuration.GetConnectionString("DefaultConnection"));
            });

Command for creating ef migration: >> dotnet ef migrations add InitialCreate -p .\Persistence\ -s .\API\

Command for Creating database from ef migration >> dotnet ef database update ( if we do not specify the migration name,
it takes the name of the latest migration )

The recommended way to create database is 
1. Go to the Main method of the startup project 

Add this logic:

 var host = CreateWebHostBuilder(args).Build();

            using ( var scope = host.Services.CreateScope())
            {
                    var services = scope.ServiceProvider;
                    try
                    {
                        var context = services.GetRequiredService<DataContext>();
                        context.Database.Migrate();
                    }
                    catch(Exception ex)
                    {
                        var logger = services.GetRequiredService<ILogger<Program>>();
                        logger.LogError(ex, "An error occured during migration");
                    }
            }

            host.Run();



2. Now everything application is run, it will check for any existing migrations and do the migration and create the database
if it does not exist.

3.Now for to command prompt and from within the Startup project folder run the command
	dotnet watch run 

This command will only work insude the context of the startup project -- We will get an error if we use it as the solution
level, even with the -p switch


Seeding the data
-----------------

Use migrations to acutally seed the data.

Add method to the class Persistence.DataContext.OnModelCreating


        protected override void OnModelCreating(ModelBuilder builder)
        {
            builder.Entity<Value>()
            .HasData(
                new Value {Id = 1, Name = "Value 101"},
                new Value {Id = 2, Name = "Value 102"},
                new Value {Id = 3, Name = "Value 103"}
            );
        }

Then run the command 
>> dotnet ef migrations add SeedValues -p .\Persistence\ -s .\API\
-p specifies the class having the DbContext
-s is the startup Project
SeedValues is the name of the migrations

Then restart the application

Go to the startup project /API/ and run the command
>> dotnet watch run


How to access the data via API endpoint
=======================================

Go to ValuesController:

Inject the DbContext to the ValuesController constructor. This is injected using the DI as we have added DbContext as 
service in Startup.cs

Then we query the database using this dbContext
We are using Async query as written below:

[HttpGet]
        public async Task<ActionResult<IEnumerable<Value>>> Get()
        {
            var values = await _context.Values.ToListAsync();
            return Ok(values);
        }

Task is added for Async Return, The method is also marked async.
await is the method call we need to wait.
Await takes in a function which is Async .

Testing the API using the PostMan tool:
=======================================



Module 3
========

Walking Skeleton Part 2 - Client

In this module:
	create-react-app
	Review the app
	React Concepts and Typescript
	React State
	Featching data from the APICORS
	Semantic UI

Will use create-react-app , this is facebook tool
Run the command  >> npx create-react-app client-app --use-npm --typescript

React app is a single page application ==> there is a single index.html page

The index.html does not contain any JavaScript references, the create-react-app uses 'Webpack' in the background
This weebpack provides the JavaScript references

index.tsx is the main entry point into the app. 
This calls : ReactDOM.render(<App />, document.getElementById('root')); 
Here , we are searching for 'root' element within the document and then rendering the App/ component inside it.

The App component is within App.tsx => Now this is a Function component
const App: React.FC = () => {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.tsx</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

package.json contains a section 'scripts' which has the scripts to run the JavaScript.
It uses react-scripts to run the application. react-scripts are provided by Facebook and these manage the script execution for us.

We can use eject, react-scripts eject to bring the app outside the control of react-scripts.


Why React ?
Used by lot of big groups: Facebook, Instagram, AirBnB, Netflix

React most loved in Stack Overflow Developer Survey 2019: Bug Community of React developers

Reacct is fast : Uses concept of Virtual DOM, React stores compoent tree in Virtual DOM and patches it based on changes

Easy to Learn: Uses minimal set of APIs 
1. render()
2. constructor()
3. componentDidMount()
4. componentWillUnMount()
5. componentDidUpdate()
6. setState()
7. React component
8. JSX
9. React Hooks ( useState, useEffect and more ), can be hooked to function components for state management and lifecycle management

React is just a library and not a Framework
Does not come with nor has an opinion on
	a. Forms
	b. Validation
	c. HTTP API calls
	d. State management

It is just javascript/typescript.


REACT components
================
React Component combines all the aspects : HTML,JS, CSS together in single file rather than importing them separately. React uses JSX for this purposes
React components have states, properties

TypeScript Rocks
================
1. Strong Typing
2. Object Oriented
3. Better Intellisense
4. Access Modifiers 
5. Future JavaScript features 
6. Catches silly mistakes in Development
7. 3rd party libraries, Every JS module has TS def files

TypeScript is annoying
======================
1. More upfront code
2. 3rd party libraries, not all have TS support, rapidly diminishing problem
3. Strict mode is ...strict!

TS Demo
=======
1. tsconfig.json options-isolateModules flag: All files must be modules when this flag is set
So remove this flag from tsconfig.json options

React and TypeScript
====================

1. PropTypes are legacy for parameter type checking in React, replaced with Flow
2. TypeScript since 2.1 React



















